#! /usr/bin/env python3

################################################################
# WARNING: this file is automatically generated by SalomeTools #
# WARNING: and so could be overwritten at any time.            #
################################################################

import os
import sys
import subprocess
import os.path

# Add the pwdPath to able to run the launcher after unpacking a package
# Used only in case of a salomeTools package
out_dir_Path=os.path.dirname(os.path.realpath(__file__))

# Preliminary work to initialize path to SALOME Python modules
def __initialize():

  sys.path[:0] = [ out_dir_Path + r'/BINARIES-UB20.04/KERNEL/bin/salome' ]
  
  # define folder to store omniorb config (initially in virtual application folder)
  try:
    from salomeContextUtils import setOmniOrbUserPath
    setOmniOrbUserPath()
  except Exception as e:
    print(e)
    sys.exit(1)
# End of preliminary work

# salome doc only works for virtual applications. Therefore we overwrite it with this function
def _showDoc(modules):
    for module in modules:
      modulePath = os.getenv(module+"_ROOT_DIR")
      if modulePath != None:
        baseDir = os.path.join(modulePath, "share", "doc", "salome")
        docfile = os.path.join(baseDir, "gui", module.upper(), "index.html")
        if not os.path.isfile(docfile):
          docfile = os.path.join(baseDir, "tui", module.upper(), "index.html")
        if not os.path.isfile(docfile):
          docfile = os.path.join(baseDir, "dev", module.upper(), "index.html")
        if os.path.isfile(docfile):
          out, err = subprocess.Popen(["xdg-open", docfile]).communicate()
        else:
          print("Online documentation is not accessible for module:", module)
      else:
        print(module+"_ROOT_DIR not found!")

def main(args):
  # Identify application path then locate configuration files
  __initialize()

  if args == ['--help']:
    from salomeContext import usage
    usage()
    sys.exit(0)

  #from salomeContextUtils import getConfigFileNames
  #configFileNames, args, unexisting = getConfigFileNames( args, checkExistence=True )
  #if len(unexisting) > 0:
  #  print("ERROR: unexisting configuration file(s): " + ', '.join(unexisting))
  #  sys.exit(1)

  # Create a SalomeContext which parses configFileNames to initialize environment
  try:
    from salomeContext import SalomeContext, SalomeContextException
    context = SalomeContext(None)
    
    # Here set specific variables, if needed
    # context.addToPath('mypath')
    # context.addToLdLibraryPath('myldlibrarypath')
    # context.addToPythonPath('mypythonpath')
    # context.setVariable('myvarname', 'value')

    # Logger level error
    context.getLogger().setLevel(40)
    context.setVariable(r"PRODUCT_ROOT_DIR", out_dir_Path + r"", overwrite=True)
    # PRODUCT environment
    context.setVariable(r"SALOME_trace", r"local", overwrite=True)
    context.setVariable(r"SALOME_MODULES", r"SHAPER,SHAPERSTUDY,GEOM,SMESH,PARAVIS,YACS,JOBMANAGER", overwrite=True)
    context.setVariable(r"PYTHONIOENCODING", r"UTF_8", overwrite=True)
    context.setVariable(r"SALOME_MODULES_ORDER", r"SHAPER:SHAPERSTUDY:GEOM:SMESH", overwrite=True)
    context.setVariable(r"ROOT_SALOME_INSTALL", r"$PRODUCT_ROOT_DIR", overwrite=True)


    #[all products]

    #[Python]
    context.setVariable(r"PYTHON_ROOT_DIR", r"/usr", overwrite=True)
    context.setVariable(r"PYTHON_INCLUDE", r"/usr/include/python3.8", overwrite=True)
    context.setVariable(r"PYTHON_VERSION", r"3.8", overwrite=True)
    context.setVariable(r"PYTHONBIN", r"/usr/bin/python3", overwrite=True)
    context.setVariable(r"PYTHON_LIBDIR", r"lib/python${PYTHON_VERSION}/site-packages", overwrite=True)

    #[setuptools]
    context.setVariable(r"SETUPTOOLS_ROOT_DIR", r"/usr", overwrite=True)
    context.setVariable(r"SETUPTOOLDIR", r"/usr", overwrite=True)

    #[alabaster]

    #[pytz]

    #[Babel]

    #[boost]
    context.setVariable(r"BOOSTDIR", r"/usr", overwrite=True)
    context.setVariable(r"BOOST_ROOT_DIR", r"/usr", overwrite=True)

    #[freetype]

    #[freeimage]

    #[CAS]
    context.setVariable(r"CSF_ShadersDirectory", out_dir_Path + r"/BINARIES-UB20.04/CAS/share/opencascade/resources/Shaders", overwrite=True)
    context.setVariable(r"CSF_UnitsLexicon", out_dir_Path + r"/BINARIES-UB20.04/CAS/share/opencascade/resources/UnitsAPI/Lexi_Expr.dat", overwrite=True)
    context.setVariable(r"CSF_UnitsDefinition", out_dir_Path + r"/BINARIES-UB20.04/CAS/share/opencascade/resources/UnitsAPI/Units.dat", overwrite=True)
    context.setVariable(r"CSF_SHMessage", out_dir_Path + r"/BINARIES-UB20.04/CAS/share/opencascade/resources/SHMessage", overwrite=True)
    context.setVariable(r"CSF_XSMessage", out_dir_Path + r"/BINARIES-UB20.04/CAS/share/opencascade/resources/XSMessage", overwrite=True)
    context.setVariable(r"CSF_MDTVTexturesDirectory", out_dir_Path + r"/BINARIES-UB20.04/CAS/share/opencascade/resources/Textures", overwrite=True)
    context.setVariable(r"MMGT_REENTRANT", r"1", overwrite=True)
    context.setVariable(r"CSF_StandardDefaults", out_dir_Path + r"/BINARIES-UB20.04/CAS/share/opencascade/resources/StdResource", overwrite=True)
    context.setVariable(r"CSF_PluginDefaults", out_dir_Path + r"/BINARIES-UB20.04/CAS/share/opencascade/resources/StdResource", overwrite=True)
    context.setVariable(r"CASROOT", out_dir_Path + r"/BINARIES-UB20.04/CAS", overwrite=True)
    context.setVariable(r"CAS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/CAS", overwrite=True)
    context.setVariable(r"OPENCASCADE_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/CAS", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/CAS")
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/CAS/bin")
    context.setVariable(r"LD_LIBRARY_PATH", out_dir_Path + r"/BINARIES-UB20.04/CAS/lib", overwrite=True)

    #[docutils]
    context.setVariable(r"DOCUTILS_ROOT_DIR", r"/usr", overwrite=True)
    context.setVariable(r"DOCUTILSDIR", r"/usr", overwrite=True)

    #[six]

    #[Pygments]

    #[markupsafe]

    #[Jinja2]
    context.setVariable(r"JINJA_ROOT_DIR", r"/usr", overwrite=True)
    context.setVariable(r"JINJADIR", r"/usr", overwrite=True)

    #[sphinxcontrib_websupport]

    #[pyparsing]

    #[packaging]

    #[certifi]

    #[urllib3]

    #[idna]

    #[chardet]

    #[requests]

    #[imagesize]

    #[snowballstemmer]

    #[Sphinx]
    context.setVariable(r"SPHINXDIR", r"/usr", overwrite=True)
    context.setVariable(r"SPHINX_INSTALL_DIR", r"/usr", overwrite=True)
    context.setVariable(r"SPHINX_ROOT_DIR", r"/usr", overwrite=True)

    #[Cython]

    #[lapack]
    context.setVariable(r"LAPACKHOME", r"/usr", overwrite=True)
    context.setVariable(r"LAPACK_ROOT_DIR", r"/", overwrite=True)

    #[numpy]

    #[scipy]

    #[cppunit]
    context.setVariable(r"CPPUNIT_ROOT_DIR", r"/usr", overwrite=True)
    context.setVariable(r"CPPUNITHOME", r"/usr", overwrite=True)
    context.setVariable(r"CPPUNIT_ROOT", r"/usr", overwrite=True)

    #[openmpi]
    context.setVariable(r"MPI_ROOT_DIR", r"/usr/lib/x86_64-linux-gnu/openmpi", overwrite=True)
    context.setVariable(r"OPENMPIDIR", r"/usr/lib/x86_64-linux-gnu/openmpi", overwrite=True)
    context.setVariable(r"MPI_ROOT", r"/usr/lib/x86_64-linux-gnu/openmpi", overwrite=True)
    context.setVariable(r"MPI_C_COMPILER", r"/usr/bin/mpicc", overwrite=True)
    context.setVariable(r"MPI_CXX_COMPILER", r"/usr/bin/mpicxx", overwrite=True)
    context.setVariable(r"MPI_C_FOUND", r"/usr/lib/x86_64-linux-gnu/openmpi/lib/libmpi.so", overwrite=True)
    context.setVariable(r"MPI_INCLUDE_DIR", r"/usr/lib/x86_64-linux-gnu/openmpi/include", overwrite=True)
    context.addToPath(r"/usr/bin")
    context.addToLdLibraryPath(r"/usr/lib/x86_64-linux-gnu/openmpi/lib")

    #[hdf5]
    context.setVariable(r"HDF5HOME", out_dir_Path + r"/BINARIES-UB20.04/hdf5", overwrite=True)
    context.setVariable(r"HDF5_DIR", out_dir_Path + r"/BINARIES-UB20.04/hdf5", overwrite=True)
    context.setVariable(r"HDF5_ROOT", out_dir_Path + r"/BINARIES-UB20.04/hdf5", overwrite=True)
    context.setVariable(r"HDF5_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/hdf5", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/hdf5/bin")
    context.setVariable(r"HDF5_LIBRARIES", out_dir_Path + r"/BINARIES-UB20.04/hdf5/lib", overwrite=True)
    context.setVariable(r"HDF5_INCLUDE_DIRS", out_dir_Path + r"/BINARIES-UB20.04/hdf5/include", overwrite=True)
    context.setVariable(r"HDF5_VERSION", r"1.10.3", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/hdf5/lib")

    #[medfile]
    context.setVariable(r"MED3HOME", out_dir_Path + r"/BINARIES-UB20.04/medfile", overwrite=True)
    context.setVariable(r"MED2HOME", out_dir_Path + r"/BINARIES-UB20.04/medfile", overwrite=True)
    context.setVariable(r"MEDFILE_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/medfile", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/medfile/bin")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/medfile/lib")
    context.setVariable(r"PYTHONPATH", out_dir_Path + r"/BINARIES-UB20.04/medfile/lib/python${PYTHON_VERSION}/site-packages", overwrite=True)

    #[scotch]
    context.setVariable(r"SCOTCH_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/scotch", overwrite=True)
    context.setVariable(r"PTSCOTCH_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/scotch", overwrite=True)
    context.setVariable(r"PTSCOTCHDIR", out_dir_Path + r"/BINARIES-UB20.04/scotch", overwrite=True)
    context.setVariable(r"SCOTCHDIR", out_dir_Path + r"/BINARIES-UB20.04/scotch", overwrite=True)
    context.setVariable(r"PTSCOTCH_INCLUDE_DIR", out_dir_Path + r"/BINARIES-UB20.04/scotch/include", overwrite=True)

    #[libxml2]

    #[click]

    #[sphinxintl]

    #[CONFIGURATION]
    context.setVariable(r"CONFIGURATION_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/CONFIGURATION", overwrite=True)
    context.addToPath(r"${CONFIGURATION_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${CONFIGURATION_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${CONFIGURATION_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${CONFIGURATION_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${CONFIGURATION_ROOT_DIR}/${PYTHON_LIBDIR}/salome")

    #[metis]
    context.setVariable(r"METISDIR", r"/usr", overwrite=True)
    context.setVariable(r"METIS_ROOT_DIR", r"/usr", overwrite=True)

    #[MEDCOUPLING]
    context.setVariable(r"MEDCOUPLING_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/MEDCOUPLING", overwrite=True)
    context.addToPath(r"${MEDCOUPLING_ROOT_DIR}/bin")
    context.addToLdLibraryPath(r"${MEDCOUPLING_ROOT_DIR}/lib")
    context.addToPythonPath(r"${MEDCOUPLING_ROOT_DIR}/bin")
    context.addToPythonPath(r"${MEDCOUPLING_ROOT_DIR}/lib")
    context.addToPythonPath(r"${MEDCOUPLING_ROOT_DIR}/${PYTHON_LIBDIR}")

    #[mpi4py]

    #[C3PO]
    context.setVariable(r"C3PODIR", out_dir_Path + r"/BINARIES-UB20.04/C3PO", overwrite=True)
    context.setVariable(r"C3PO_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/C3PO", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/C3PO")
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/C3PO/bin")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/C3PO/lib/python${PYTHON_VERSION}/site-packages")

    #[cgns]
    context.setVariable(r"CGNS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/cgns", overwrite=True)
    context.setVariable(r"CGNS_INCLUDE_DIR", out_dir_Path + r"/BINARIES-UB20.04/cgns/include", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/cgns/bin")
    context.setVariable(r"CGNS_LIBRARY", out_dir_Path + r"/BINARIES-UB20.04/cgns/lib/libcgns.so", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/cgns/lib")

    #[tbb]

    #[nlopt]
    context.setVariable(r"NLOPT_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/nlopt", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/nlopt/lib")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/nlopt/lib/python${PYTHON_VERSION}/site-packages")

    #[eigen]
    context.setVariable(r"EIGEN_ROOT_DIR", r"/usr", overwrite=True)

    #[qt]
    context.setVariable(r"QT5_ROOT_DIR", r"/usr", overwrite=True)
    context.setVariable(r"Qt5Core_DIR", r"/usr/lib/x86_64-linux-gnu/cmake/Qt5Core", overwrite=True)
    context.setVariable(r"Qt5Gui_DIR", r"/usr/lib/x86_64-linux-gnu/cmake/Qt5Gui", overwrite=True)
    context.setVariable(r"Qt5Widgets_DIR", r"/usr/lib/x86_64-linux-gnu/cmake/Qt5Widgets", overwrite=True)
    context.setVariable(r"Qt5Network_DIR", r"/usr/lib/x86_64-linux-gnu/cmake/Qt5Network", overwrite=True)
    context.setVariable(r"Qt5Xml_DIR", r"/usr/lib/x86_64-linux-gnu/cmake/Qt5Xml", overwrite=True)
    context.setVariable(r"Qt5OpenGL_DIR", r"/usr/lib/x86_64-linux-gnu/cmake/Qt5OpenGL", overwrite=True)
    context.setVariable(r"Qt5PrintSupport_DIR", r"/usr/lib/x86_64-linux-gnu/cmake/Qt5PrintSupport", overwrite=True)
    context.setVariable(r"Qt5Help_DIR", r"/usr/lib/x86_64-linux-gnu/cmake/Qt5Help", overwrite=True)
    context.setVariable(r"Qt5Test_DIR", r"/usr/lib/x86_64-linux-gnu/cmake/Qt5Test", overwrite=True)
    context.setVariable(r"Qt5X11Extras_DIR", r"/usr/lib/x86_64-linux-gnu/cmake/Qt5X11Extras", overwrite=True)
    context.setVariable(r"QT_QPA_PLATFORM_PLUGIN_PATH", r"/usr/lib/x86_64-linux-gnu/qt5/plugins", overwrite=True)

    #[sip]
    context.setVariable(r"SIPDIR", r"/usr", overwrite=True)
    context.setVariable(r"SIP_ROOT_DIR", r"/usr", overwrite=True)

    #[PyQt]
    context.setVariable(r"PYQT5_ROOT_DIR", r"/usr", overwrite=True)

    #[dateutil]

    #[cycler]

    #[kiwisolver]

    #[matplotlib]

    #[cminpack]
    context.setVariable(r"CMINPACK_ROOT_DIR", r"/usr", overwrite=True)

    #[graphviz]
    context.setVariable(r"GRAPHVIZROOT", r"/usr", overwrite=True)
    context.setVariable(r"GRAPHVIZ_ROOT_DIR", r"/usr", overwrite=True)

    #[ispc]
    context.setVariable(r"ISPC_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/ispc", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/ispc/bin")

    #[embree]
    context.setVariable(r"EMBREE_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/embree", overwrite=True)
    context.setVariable(r"EMBREE_VERSION", r"3.12.2", overwrite=True)
    context.setVariable(r"embree_DIR", out_dir_Path + r"/BINARIES-UB20.04/embree", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/embree/lib")

    #[FMILibrary]
    context.setVariable(r"FMILIBRARY_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/FMILibrary", overwrite=True)
    context.setVariable(r"FMIL_HOME", out_dir_Path + r"/BINARIES-UB20.04/FMILibrary", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/FMILibrary/bin")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/FMILibrary/lib")

    #[fftw]

    #[gl2ps]

    #[netcdf]
    context.setVariable(r"NETCDF_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/netcdf", overwrite=True)
    context.setVariable(r"NETCDF_INSTALL_DIR", out_dir_Path + r"/BINARIES-UB20.04/netcdf", overwrite=True)
    context.setVariable(r"NETCDF_VERSION", r"4.6.2", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/netcdf/bin")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/netcdf/lib")

    #[gdal]
    context.setVariable(r"GDAL_ROOT_DIR", r"/usr", overwrite=True)

    #[gmsh]
    context.setVariable(r"GMSHHOME", out_dir_Path + r"/BINARIES-UB20.04/gmsh", overwrite=True)
    context.setVariable(r"GMSH_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/gmsh", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/gmsh/lib")

    #[MeshGems]
    context.setVariable(r"LICENCE_FILE", r"/home/salome-public/prerequis/LICENCE/libSalomeMeshGemsKeyGenerator", overwrite=True)
    # Here you can define your license parameters for MeshGems
    # DASSAULT MeshGems KeyGenerator based License
    context.setVariable(r"SALOME_MG_KEYGEN_LIB_PATH", r"/home/salome-public/prerequis/LICENCE/libSalomeMeshGemsKeyGenerator-2.14-4-UB20.04.so", overwrite=True)
    context.setVariable(r"MESHGEMSHOME", out_dir_Path + r"/BINARIES-UB20.04/MeshGems", overwrite=True)
    context.setVariable(r"MESHGEMS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/MeshGems", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/MeshGems/bin")
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/MeshGems/bin/Linux_64")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/MeshGems/lib/Linux_64")

    #[tcl]
    context.setVariable(r"TCL_ROOT_DIR", r"/usr", overwrite=True)
    context.setVariable(r"TCLHOME", r"/usr", overwrite=True)

    #[tk]
    context.setVariable(r"TK_ROOT_DIR", r"/usr", overwrite=True)
    context.setVariable(r"TKHOME", r"/usr", overwrite=True)

    #[netgen]
    context.setVariable(r"NETGENHOME", out_dir_Path + r"/BINARIES-UB20.04/netgen", overwrite=True)
    context.setVariable(r"NETGEN_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/netgen", overwrite=True)
    context.setVariable(r"NETGEN_BIN", out_dir_Path + r"/BINARIES-UB20.04/netgen/bin", overwrite=True)
    context.setVariable(r"NETGEN_LIBRARY", out_dir_Path + r"/BINARIES-UB20.04/netgen/lib", overwrite=True)
    context.setVariable(r"NETGEN_LIBRARIES", out_dir_Path + r"/BINARIES-UB20.04/netgen/lib", overwrite=True)
    context.setVariable(r"NETGEN_INCLUDE_DIR", out_dir_Path + r"/BINARIES-UB20.04/netgen/include", overwrite=True)
    context.setVariable(r"NETGEN_INCLUDE_DIRS", out_dir_Path + r"/BINARIES-UB20.04/netgen/include", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/netgen/bin")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/netgen/lib")

    #[nose]

    #[numpydoc]

    #[omniORB]
    context.setVariable(r"OMNIORB_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/omniORB", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/omniORB/bin")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/omniORB/lib")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/omniORB/lib/python${PYTHON_VERSION}/site-packages")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/omniORB/lib64/python${PYTHON_VERSION}/site-packages")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/omniORB/lib")
    context.setVariable(r"OMNIORB_USER_PATH", r"/tmp", overwrite=True)

    #[omniORBpy]
    context.setVariable(r"OMNIORBPY_ROOT_DIR", r"${OMNIORB_ROOT_DIR}", overwrite=True)

    #[opencv]
    context.setVariable(r"OPENCV_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/opencv", overwrite=True)
    context.setVariable(r"OPENCV_HOME", out_dir_Path + r"/BINARIES-UB20.04/opencv", overwrite=True)
    context.setVariable(r"OPENCV_DIR", out_dir_Path + r"/BINARIES-UB20.04/opencv", overwrite=True)
    context.setVariable(r"OpenCV_DIR", out_dir_Path + r"/BINARIES-UB20.04/opencv", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/opencv/bin")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/opencv/lib")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/opencv/lib/python${PYTHON_VERSION}/site-packages")

    #[rkCommon]
    context.setVariable(r"RKCOMMON_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/rkCommon", overwrite=True)
    context.setVariable(r"rkcommon_DIR", out_dir_Path + r"/BINARIES-UB20.04/rkCommon/lib/cmake/rkcommon-1.5.1", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/rkCommon/lib")

    #[openVKL]
    context.setVariable(r"OPENVKL_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/openVKL", overwrite=True)
    context.setVariable(r"openvkl_DIR", out_dir_Path + r"/BINARIES-UB20.04/openVKL/lib/cmake/openvkl-0.11.0", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/openVKL/lib")

    #[PyFMI]
    context.setVariable(r"PYFMI_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/PyFMI", overwrite=True)
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/PyFMI/lib/python${PYTHON_VERSION}/site-packages")

    #[pandas]

    #[statsmodels]

    #[openturns]
    context.setVariable(r"OT_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/openturns", overwrite=True)
    context.setVariable(r"OT_HOME", out_dir_Path + r"/BINARIES-UB20.04/openturns", overwrite=True)
    context.setVariable(r"OT_VERSION", r"1.18", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/openturns/bin")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/openturns/lib")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/openturns/lib/python${PYTHON_VERSION}/site-packages")

    #[ospray]
    context.setVariable(r"OSPRAY_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/ospray", overwrite=True)
    context.setVariable(r"ospray_DIR", out_dir_Path + r"/BINARIES-UB20.04/ospray/lib/cmake/ospray-2.4.0", overwrite=True)
    context.setVariable(r"OSPRAY_VERSION", r"2.4.0", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/ospray/lib")

    #[ParaView]
    context.setVariable(r"PVHOME", out_dir_Path + r"/BINARIES-UB20.04/ParaView", overwrite=True)
    context.setVariable(r"VTKHOME", out_dir_Path + r"/BINARIES-UB20.04/ParaView", overwrite=True)
    context.setVariable(r"PVVERSION", r"5.9", overwrite=True)
    context.setVariable(r"PARAVIEW_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/ParaView", overwrite=True)
    context.setVariable(r"PARAVIEW_VERSION", r"5.9", overwrite=True)
    context.setVariable(r"ParaView_DIR", r"${PVHOME}/lib/paraview-5.9", overwrite=True)
    context.addToPath(r"${PVHOME}/bin")
    context.setVariable(r"PV_PLUGIN_PATH", r"${PVHOME}/lib/paraview-5.9", overwrite=True)
    context.addToVariable(r"PV_PLUGIN_PATH", r"${PVHOME}/lib/paraview-5.9/plugins",separator=":")
    context.addToPythonPath(r"${PVHOME}/lib/paraview-5.9/site-packages")
    context.addToPythonPath(r"${PVHOME}/lib/paraview-5.9/site-packages/vtk")
    context.addToPath(r"${PVHOME}/include/paraview-5.9")
    context.addToLdLibraryPath(r"${PVHOME}/lib/paraview-5.9")
    context.addToPythonPath(r"${PVHOME}/lib/paraview-5.9")
    context.setVariable(r"VTK_ROOT_DIR", r"${VTKHOME}", overwrite=True)
    context.setVariable(r"VTK_DIR", r"${VTKHOME}/lib/cmake/paraview-5.9", overwrite=True)
    context.addToLdLibraryPath(r"${VTKHOME}/lib")
    context.addToPythonPath(r"${VTKHOME}/lib/python${PYTHON_VERSION}/site-packages")

    #[LIBBATCH]
    context.setVariable(r"LIBBATCH_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/LIBBATCH", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/LIBBATCH/lib")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/LIBBATCH/lib/python${PYTHON_VERSION}")

    #[psutil]

    #[KERNEL]
    context.setVariable(r"KERNEL_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/KERNEL", overwrite=True)
    context.addToPath(r"${KERNEL_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${KERNEL_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${KERNEL_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${KERNEL_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${KERNEL_ROOT_DIR}/${PYTHON_LIBDIR}/salome")

    #[qwt]
    context.setVariable(r"QWTHOME", r"/usr", overwrite=True)
    context.setVariable(r"QWT_ROOT_DIR", r"/usr", overwrite=True)

    #[sphinx_rtd_theme]

    #[GUI]
    context.setVariable(r"GUI_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/GUI", overwrite=True)
    context.addToPath(r"${GUI_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${GUI_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${GUI_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${GUI_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${GUI_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.setVariable(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/GUI/share/salome/resources/gui", overwrite=True)

    #[EFICAS_TOOLS]
    context.setVariable(r"EFICAS_TOOLS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS", overwrite=True)
    context.setVariable(r"EFICAS_TOOLS_ROOT", out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS", overwrite=True)
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Accas")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Accas")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Aide")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Aide")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/convert")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/convert")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Doc")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Doc")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Editeur")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Editeur")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Efi2Xsd")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Efi2Xsd")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Extensions")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Extensions")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/generator")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/generator")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Ihm")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Ihm")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/InterfaceQT4")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/InterfaceQT4")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Noyau")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Noyau")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Telemac")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Telemac")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Traducteur")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/Traducteur")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/UiQT5")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/EFICAS_TOOLS/UiQT5")

    #[EFICAS]
    context.setVariable(r"EFICAS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/EFICAS", overwrite=True)
    context.addToPath(r"${EFICAS_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${EFICAS_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${EFICAS_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${EFICAS_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${EFICAS_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SALOME_MODULES", r"EFICAS",separator=",")
    context.setVariable(r"EFICAS_ROOT", out_dir_Path + r"/BINARIES-UB20.04/EFICAS", overwrite=True)
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/EFICAS/share/salome/resources/eficas",separator=":")

    #[pmml]
    context.setVariable(r"PMML_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/pmml", overwrite=True)
    context.setVariable(r"PMML_INCLUDE_DIR", out_dir_Path + r"/BINARIES-UB20.04/pmml/include", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/pmml/bin")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/pmml/lib")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/pmml/lib/python${PYTHON_VERSION}/site-packages")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/pmml/bin")

    #[YACS]
    context.setVariable(r"YACS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/YACS", overwrite=True)
    context.addToPath(r"${YACS_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${YACS_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${YACS_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${YACS_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${YACS_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/YACS/share/salome/resources/yacs",separator=":")

    #[ADAO]
    context.setVariable(r"ADAO_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/ADAO", overwrite=True)
    context.addToPath(r"${ADAO_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${ADAO_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${ADAO_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${ADAO_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${ADAO_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SALOME_MODULES", r"ADAO",separator=",")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/ADAO/share/salome/resources/adao",separator=":")
    context.setVariable(r"ADAO_ENGINE_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/ADAO", overwrite=True)
    context.setVariable(r"ADAO_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/ADAO", overwrite=True)
    context.setVariable(r"CURRENT_SOFTWARE_INSTALL_DIR", out_dir_Path + r"/BINARIES-UB20.04/ADAO", overwrite=True)
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/ADAO/lib/python${PYTHON_VERSION}/site-packages")

    #[PY2CPP]
    context.setVariable(r"PY2CPP_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/PY2CPP", overwrite=True)
    context.setVariable(r"Py2cpp_DIR", out_dir_Path + r"/BINARIES-UB20.04/PY2CPP/lib/cmake/py2cpp", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/PY2CPP/lib")

    #[YDEFX]
    context.setVariable(r"YDEFX_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/YDEFX", overwrite=True)
    context.addToPath(r"${YDEFX_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${YDEFX_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${YDEFX_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${YDEFX_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${YDEFX_ROOT_DIR}/${PYTHON_LIBDIR}/salome")

    #[PERSALYS]
    context.setVariable(r"PERSALYS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/PERSALYS", overwrite=True)
    context.setVariable(r"PERSALYS_VERSION", r"v12.0", overwrite=True)
    context.setVariable(r"OTGUI_DIR", out_dir_Path + r"/BINARIES-UB20.04/PERSALYS", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/PERSALYS/bin")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/PERSALYS/lib")
    context.addToVariable(r"PV_PLUGIN_PATH", out_dir_Path + r"/BINARIES-UB20.04/PERSALYS/lib/paraview-${PARAVIEW_VERSION}/plugins",separator=":")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/PERSALYS/lib/python${PYTHON_VERSION}/site-packages")
    context.setVariable(r"OTGUI_HTML_DOCUMENTATION_PATH", out_dir_Path + r"/BINARIES-UB20.04/PERSALYS/share/otgui/doc/html/", overwrite=True)
    context.setVariable(r"PERSALYS_HTML_DOCUMENTATION_PATH", out_dir_Path + r"/BINARIES-UB20.04/PERSALYS/share/persalys/doc/html/", overwrite=True)

    #[petsc]
    context.setVariable(r"PETSCDIR", out_dir_Path + r"/BINARIES-UB20.04/petsc", overwrite=True)
    context.setVariable(r"PETSC_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/petsc", overwrite=True)
    context.setVariable(r"PETSC_DIR", out_dir_Path + r"/BINARIES-UB20.04/petsc", overwrite=True)
    context.setVariable(r"PETSC4PY", out_dir_Path + r"/BINARIES-UB20.04/petsc/lib/petsc4py", overwrite=True)
    context.setVariable(r"SLEPC4PY", out_dir_Path + r"/BINARIES-UB20.04/petsc/lib/slepc4py", overwrite=True)
    context.setVariable(r"PETSC_ARCH", r"arch-linux-c-opt", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/petsc/lib")
    context.addToPythonPath(r"${PETSC4PY}")
    context.addToPythonPath(r"${PETSC4PY}/lib")
    context.addToPythonPath(r"${SLEPC4PY}")
    context.addToPythonPath(r"${SLEPC4PY}/lib")

    #[Pillow]

    #[planegcs]
    context.setVariable(r"PLANEGCS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/planegcs", overwrite=True)
    context.addToLdLibraryPath(r"${PLANEGCS_ROOT_DIR}/lib")

    #[pyreadline]
    context.setVariable(r"PYREADLINE_ROOT_DIR", r"${PYTHON_ROOT_DIR}", overwrite=True)

    #[root]
    context.setVariable(r"ROOTSYS", out_dir_Path + r"/BINARIES-UB20.04/root", overwrite=True)
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/root/lib")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/root/lib")
    context.setVariable(r"DYLD_LIBRARY_PATH", out_dir_Path + r"/BINARIES-UB20.04/root/lib", overwrite=True)
    context.setVariable(r"SHLIB_PATH", out_dir_Path + r"/BINARIES-UB20.04/root/lib", overwrite=True)
    context.setVariable(r"LIBPATH", out_dir_Path + r"/BINARIES-UB20.04/root/lib", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/root/bin")

    #[FIELDS]
    context.setVariable(r"FIELDS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/FIELDS", overwrite=True)
    context.addToPath(r"${FIELDS_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${FIELDS_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${FIELDS_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${FIELDS_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${FIELDS_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SALOME_MODULES", r"FIELDS",separator=",")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/FIELDS/share/salome/resources/fields",separator=":")

    #[GEOM]
    context.setVariable(r"GEOM_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/GEOM", overwrite=True)
    context.addToPath(r"${GEOM_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${GEOM_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${GEOM_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${GEOM_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${GEOM_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.setVariable(r"PARALLEL_VISU", r"1", overwrite=True)
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/GEOM/share/salome/resources/geom",separator=":")
    context.setVariable(r"GEOM_PluginsList", r"BREPPlugin:STEPPlugin:IGESPlugin:STLPlugin:XAOPlugin:VTKPlugin:AdvancedGEOM", overwrite=True)
    context.setVariable(r"CSF_ShHealingDefaults", out_dir_Path + r"/BINARIES-UB20.04/GEOM/share/salome/resources/geom", overwrite=True)

    #[SHAPER]
    context.setVariable(r"SHAPER_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/SHAPER", overwrite=True)
    context.addToPath(r"${SHAPER_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${SHAPER_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${SHAPER_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${SHAPER_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${SHAPER_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/SHAPER/share/salome/resources/shaper",separator=":")

    #[SHAPERSTUDY]
    context.setVariable(r"SHAPERSTUDY_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/SHAPERSTUDY", overwrite=True)
    context.addToPath(r"${SHAPERSTUDY_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${SHAPERSTUDY_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${SHAPERSTUDY_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${SHAPERSTUDY_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${SHAPERSTUDY_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/SHAPERSTUDY/share/salome/resources/shaperstudy",separator=":")

    #[TopIIVolMesh]
    context.setVariable(r"TOPIIVOLMESH_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/TopIIVolMesh", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/TopIIVolMesh/bin")

    #[SMESH]
    context.setVariable(r"SMESH_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/SMESH", overwrite=True)
    context.addToPath(r"${SMESH_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${SMESH_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${SMESH_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${SMESH_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${SMESH_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.setVariable(r"SMESH_MeshersList", r"StdMeshers", overwrite=True)
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/SMESH/share/salome/resources/smesh",separator=":")

    #[PARAVIS]
    context.setVariable(r"PARAVIS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/PARAVIS", overwrite=True)
    context.addToPath(r"${PARAVIS_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${PARAVIS_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${PARAVIS_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${PARAVIS_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${PARAVIS_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.addToVariable(r"PV_PLUGIN_PATH", out_dir_Path + r"/BINARIES-UB20.04/PARAVIS/lib/paraview",separator=";")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/PARAVIS/share/salome/resources/paravis",separator=":")

    #[StaticMeshPlugin]
    context.setVariable(r"StaticMeshPlugin", out_dir_Path + r"/BINARIES-UB20.04/StaticMeshPlugin", overwrite=True)

    #[swig]
    context.setVariable(r"SWIG_ROOT_DIR", r"/usr", overwrite=True)
    context.setVariable(r"SWIG_ROOT", r"/usr", overwrite=True)

    #[salome_system]

    #[zeromq]
    context.setVariable(r"ZEROMQ_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/zeromq", overwrite=True)
    context.setVariable(r"ZEROMQHOME", out_dir_Path + r"/BINARIES-UB20.04/zeromq", overwrite=True)
    context.setVariable(r"ZEROMQ_VERSION", r"4.3.1", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/zeromq/bin")
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/zeromq/lib")

    #[URANIE]
    context.setVariable(r"URANIE_VERSION", r"4.5", overwrite=True)
    context.setVariable(r"URANIE_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/URANIE", overwrite=True)
    context.setVariable(r"URANIESYS", out_dir_Path + r"/BINARIES-UB20.04/URANIE", overwrite=True)
    context.addToPythonPath(r"${URANIE_ROOT_DIR}/lib/python")
    context.addToLdLibraryPath(r"${URANIE_ROOT_DIR}/lib")
    context.setVariable(r"ROOTSYSLIB", r"${ROOTSYS}/lib", overwrite=True)
    context.addToPath(r"${URANIE_ROOT_DIR}/bin")
    context.addToPath(r"${ROOTSYS}/bin")
    context.setVariable(r"ROOT_INCLUDE_PATH", r"${URANIE_ROOT_DIR}/include", overwrite=True)
    context.addToLdLibraryPath(r"${URANIE_ROOT_DIR}/OPT++/optpp-2.4/lib")
    context.addToLdLibraryPath(r"${URANIE_ROOT_DIR}/JSONCPP/jsoncpp-0.10.5/lib")

    #[SALOME]
    context.setVariable(r"SALOME_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/SALOME", overwrite=True)
    context.addToPath(r"${SALOME_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${SALOME_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${SALOME_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${SALOME_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${SALOME_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.addToVariable(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/SALOME/share/salome/resources/salome",separator=":")

    #[NETGENPLUGIN]
    context.setVariable(r"NETGENPLUGIN_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/NETGENPLUGIN", overwrite=True)
    context.addToPath(r"${NETGENPLUGIN_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${NETGENPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${NETGENPLUGIN_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${NETGENPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${NETGENPLUGIN_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.addToVariable(r"SMESH_MeshersList", r"NETGENPlugin",separator=":")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/NETGENPLUGIN/share/salome/resources/netgenplugin",separator=":")

    #[BLSURFPLUGIN]
    context.setVariable(r"BLSURFPLUGIN_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/BLSURFPLUGIN", overwrite=True)
    context.addToPath(r"${BLSURFPLUGIN_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${BLSURFPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${BLSURFPLUGIN_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${BLSURFPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${BLSURFPLUGIN_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.addToVariable(r"SMESH_MeshersList", r"BLSURFPlugin",separator=":")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/BLSURFPLUGIN/share/salome/resources/blsurfplugin",separator=":")

    #[GHS3DPLUGIN]
    context.setVariable(r"GHS3DPLUGIN_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/GHS3DPLUGIN", overwrite=True)
    context.addToPath(r"${GHS3DPLUGIN_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${GHS3DPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${GHS3DPLUGIN_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${GHS3DPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${GHS3DPLUGIN_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.addToVariable(r"SMESH_MeshersList", r"GHS3DPlugin",separator=":")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/GHS3DPLUGIN/share/salome/resources/ghs3dplugin",separator=":")

    #[GHS3DPRLPLUGIN]
    context.setVariable(r"GHS3DPRLPLUGIN_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/GHS3DPRLPLUGIN", overwrite=True)
    context.addToPath(r"${GHS3DPRLPLUGIN_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${GHS3DPRLPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${GHS3DPRLPLUGIN_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${GHS3DPRLPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${GHS3DPRLPLUGIN_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.addToVariable(r"SMESH_MeshersList", r"GHS3DPRLPlugin",separator=":")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/GHS3DPRLPLUGIN/share/salome/resources/ghs3dprlplugin",separator=":")

    #[HYBRIDPLUGIN]
    context.setVariable(r"HYBRIDPLUGIN_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/HYBRIDPLUGIN", overwrite=True)
    context.addToPath(r"${HYBRIDPLUGIN_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${HYBRIDPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HYBRIDPLUGIN_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${HYBRIDPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HYBRIDPLUGIN_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.addToVariable(r"SMESH_MeshersList", r"HYBRIDPlugin",separator=":")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/HYBRIDPLUGIN/share/salome/resources/hybridplugin",separator=":")

    #[HexoticPLUGIN]
    context.setVariable(r"HexoticPLUGIN_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/HexoticPLUGIN", overwrite=True)
    context.addToPath(r"${HexoticPLUGIN_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${HexoticPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HexoticPLUGIN_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${HexoticPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HexoticPLUGIN_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.addToVariable(r"SMESH_MeshersList", r"HexoticPLUGIN",separator=":")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/HexoticPLUGIN/share/salome/resources/hexoticplugin",separator=":")

    #[GMSHPLUGIN]
    context.setVariable(r"GMSHPLUGIN_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/GMSHPLUGIN", overwrite=True)
    context.addToPath(r"${GMSHPLUGIN_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${GMSHPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${GMSHPLUGIN_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${GMSHPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${GMSHPLUGIN_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    context.addToVariable(r"SMESH_MeshersList", r"GMSHPlugin",separator=":")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/GMSHPLUGIN/share/salome/resources/gmshplugin",separator=":")

    #[HEXABLOCK]
    context.setVariable(r"HEXABLOCK_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/HEXABLOCK", overwrite=True)
    context.addToPath(r"${HEXABLOCK_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${HEXABLOCK_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HEXABLOCK_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${HEXABLOCK_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HEXABLOCK_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SALOME_MODULES", r"HEXABLOCK",separator=",")
    context.addToVariable(r"SMESH_MeshersList", r"HEXABLOCKPlugin",separator=":")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/HEXABLOCK/share/salome/resources/hexablock",separator=":")

    #[HEXABLOCKPLUGIN]
    context.setVariable(r"HEXABLOCKPLUGIN_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/HEXABLOCKPLUGIN", overwrite=True)
    context.addToPath(r"${HEXABLOCKPLUGIN_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${HEXABLOCKPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HEXABLOCKPLUGIN_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${HEXABLOCKPLUGIN_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HEXABLOCKPLUGIN_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/HEXABLOCKPLUGIN/share/salome/resources/hexablock",separator=":")

    #[HOMARD]
    context.setVariable(r"HOMARD_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/HOMARD", overwrite=True)
    context.addToPath(r"${HOMARD_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${HOMARD_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HOMARD_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${HOMARD_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HOMARD_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SALOME_MODULES", r"HOMARD",separator=",")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/HOMARD/share/salome/resources/homard",separator=":")
    context.setVariable(r"HOMARD_REP_EXE", out_dir_Path + r"/BINARIES-UB20.04/HOMARD/bin/salome", overwrite=True)
    context.setVariable(r"HOMARD_EXE", r"homard", overwrite=True)

    #[JOBMANAGER]
    context.setVariable(r"JOBMANAGER_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/JOBMANAGER", overwrite=True)
    context.addToPath(r"${JOBMANAGER_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${JOBMANAGER_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${JOBMANAGER_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${JOBMANAGER_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${JOBMANAGER_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/JOBMANAGER/share/salome/resources/jobmanager",separator=":")

    #[YACSGEN]
    context.setVariable(r"YACSGENROOT", out_dir_Path + r"/BINARIES-UB20.04/YACSGEN", overwrite=True)
    context.setVariable(r"YACSGEN_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/YACSGEN", overwrite=True)
    context.addToPath(out_dir_Path + r"/BINARIES-UB20.04/YACSGEN/bin")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/YACSGEN/bin")
    context.addToPythonPath(out_dir_Path + r"/BINARIES-UB20.04/YACSGEN/lib/python${PYTHON_VERSION}/site-packages")

    #[HELLO]
    context.setVariable(r"HELLO_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/HELLO", overwrite=True)
    context.addToPath(r"${HELLO_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${HELLO_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HELLO_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${HELLO_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${HELLO_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SALOME_MODULES", r"HELLO",separator=",")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/HELLO/share/salome/resources/hello",separator=":")

    #[PYHELLO]
    context.setVariable(r"PYHELLO_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/PYHELLO", overwrite=True)
    context.addToPath(r"${PYHELLO_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${PYHELLO_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${PYHELLO_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${PYHELLO_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${PYHELLO_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SALOME_MODULES", r"PYHELLO",separator=",")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/PYHELLO/share/salome/resources/pyhello",separator=":")

    #[DOCUMENTATION]
    context.setVariable(r"DOCUMENTATION_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/DOCUMENTATION", overwrite=True)
    context.addToPath(r"${DOCUMENTATION_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${DOCUMENTATION_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${DOCUMENTATION_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${DOCUMENTATION_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${DOCUMENTATION_ROOT_DIR}/${PYTHON_LIBDIR}/salome")

    #[SAMPLES]
    context.setVariable(r"SAMPLES_SRC_DIR", r"${PRODUCT_ROOT_DIR}/SOURCES/SAMPLES", overwrite=True)
    context.setVariable(r"DATA_DIR", r"${SAMPLES_SRC_DIR}", overwrite=True)

    #[COMPONENT]
    context.setVariable(r"COMPONENT_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/COMPONENT", overwrite=True)
    context.addToPath(r"${COMPONENT_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${COMPONENT_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${COMPONENT_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${COMPONENT_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${COMPONENT_ROOT_DIR}/${PYTHON_LIBDIR}/salome")

    #[PYCALCULATOR]
    context.setVariable(r"PYCALCULATOR_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/PYCALCULATOR", overwrite=True)
    context.addToPath(r"${PYCALCULATOR_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${PYCALCULATOR_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${PYCALCULATOR_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${PYCALCULATOR_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${PYCALCULATOR_ROOT_DIR}/${PYTHON_LIBDIR}/salome")

    #[CALCULATOR]
    context.setVariable(r"CALCULATOR_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/CALCULATOR", overwrite=True)
    context.addToPath(r"${CALCULATOR_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${CALCULATOR_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${CALCULATOR_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${CALCULATOR_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${CALCULATOR_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/CALCULATOR/share/salome/resources/calculator",separator=":")

    #[ADAO_INTERFACE]
    context.setVariable(r"ADAO_INTERFACE_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/ADAO_INTERFACE", overwrite=True)
    context.addToPath(r"${ADAO_INTERFACE_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${ADAO_INTERFACE_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${ADAO_INTERFACE_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${ADAO_INTERFACE_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${ADAO_INTERFACE_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SALOME_MODULES", r"ADAO_INTERFACE",separator=",")
    context.setVariable(r"ADAO_INTERFACE_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/ADAO_INTERFACE", overwrite=True)
    context.addToLdLibraryPath(out_dir_Path + r"/BINARIES-UB20.04/ADAO_INTERFACE/lib")

    #[PARAVISADDONS]
    context.setVariable(r"PARAVISADDONS", out_dir_Path + r"/BINARIES-UB20.04/PARAVISADDONS", overwrite=True)
    appendPath(r"PV_PLUGIN_PATH", out_dir_Path + r"/BINARIES-UB20.04/PARAVISADDONS/lib/paraview",separator=";")

    #[OPENTURNS_SALOME]
    context.setVariable(r"OPENTURNS_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/OPENTURNS", overwrite=True)
    context.addToPath(r"${OPENTURNS_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${OPENTURNS_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${OPENTURNS_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${OPENTURNS_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${OPENTURNS_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SALOME_MODULES", r"OPENTURNS",separator=",")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/OPENTURNS/share/salome/resources/openturns",separator=":")

    #[SOLVERLAB]
    context.setVariable(r"SOLVERLAB_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/SOLVERLAB", overwrite=True)
    context.addToPath(r"${SOLVERLAB_ROOT_DIR}/bin/salome")
    context.addToLdLibraryPath(r"${SOLVERLAB_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${SOLVERLAB_ROOT_DIR}/bin/salome")
    context.addToPythonPath(r"${SOLVERLAB_ROOT_DIR}/lib/salome")
    context.addToPythonPath(r"${SOLVERLAB_ROOT_DIR}/${PYTHON_LIBDIR}/salome")
    appendPath(r"SALOME_MODULES", r"SOLVERLAB",separator=",")
    appendPath(r"SalomeAppConfig", out_dir_Path + r"/BINARIES-UB20.04/SOLVERLAB/share/salome/resources/solverlab",separator=":")
    context.setVariable(r"CoreFlows_INSTALL", out_dir_Path + r"/BINARIES-UB20.04/SOLVERLAB", overwrite=True)
    context.setVariable(r"CoreFlows_ROOT_DIR", out_dir_Path + r"/BINARIES-UB20.04/SOLVERLAB", overwrite=True)
    context.setVariable(r"CoreFlows_ROOT", out_dir_Path + r"/BINARIES-UB20.04/SOLVERLAB", overwrite=True)
    context.setVariable(r"CoreFlows_PYTHON", r"ON", overwrite=True)
    context.setVariable(r"CoreFlows_DOC", r"ON", overwrite=True)
    context.setVariable(r"CoreFlows_GUI", r"ON", overwrite=True)
    context.setVariable(r"CoreFlows", r"${CoreFlows_INSTALL}/bin/CoreFlowsMainExe", overwrite=True)
    context.setVariable(r"CoreFlowsGUI", r"${CoreFlows_INSTALL}/bin/CoreFlows_Standalone.py", overwrite=True)
    context.setVariable(r"COREFLOWS_ROOT_DIR", r"${CoreFlows_ROOT_DIR}", overwrite=True)
    context.addToPath(r"${CoreFlows_ROOT_DIR}/include")
    context.addToLdLibraryPath(r"${CoreFlows_ROOT_DIR}/lib")
    context.addToPythonPath(r"${CoreFlows_ROOT_DIR}/lib")
    context.addToPythonPath(r"${CoreFlows_ROOT_DIR}/lib/coreflows")
    context.addToPythonPath(r"${CoreFlows_ROOT_DIR}/bin/coreflows")
    context.addToPythonPath(r"${CoreFlows_ROOT_DIR}/lib/cdmath")
    context.addToPythonPath(r"${CoreFlows_ROOT_DIR}/bin/cdmath")
    context.addToPythonPath(r"${CoreFlows_ROOT_DIR}/bin/cdmath/postprocessing")

    # [APPLI variables]
    context.setVariable(r"ABSOLUTE_APPLI_PATH", out_dir_Path + r"/BINARIES-UB20.04/SALOME", overwrite=True)
    context.setVariable(r"APPLI", out_dir_Path + r"/salome", overwrite=True)

    #[hook to integrate in launcher additionnal user modules]
    
    # Load all files extra.env.d/*.py and call the module's init routine]

    extradir=out_dir_Path + r"/extra.env.d"

    if os.path.exists(extradir):
        import imp
        sys.path.insert(0, os.path.join(os.getcwd(), extradir))
        for filename in sorted(
            filter(lambda x: os.path.isfile(os.path.join(extradir, x)),
                   os.listdir(extradir))):

            if filename.endswith(".py"):
                f = os.path.join(extradir, filename)
                module_name = os.path.splitext(os.path.basename(f))[0]
                fp, path, desc = imp.find_module(module_name)
                module = imp.load_module(module_name, fp, path, desc)
                module.init(context, out_dir_Path)

    #[manage salome doc command]
    if len(args) >1 and args[0]=='doc':
        _showDoc(args[1:])
        return

    # Start SALOME, parsing command line arguments
    out, err, status = context.runSalome(args)
    sys.exit(status)

  except SalomeContextException as e:
    import logging
    logging.getLogger("salome").error(e)
    sys.exit(1)
 
# salomeContext only prepend variables, we use our own appendPath when required
def appendPath(name, value, separator=os.pathsep):
    if value == '':
      return

    value = os.path.expandvars(value) # expand environment variables
    env = os.getenv(name, None)
    if env is None:
      os.environ[name] = value
    else:
      os.environ[name] = env + separator + value


if __name__ == "__main__":
  args = sys.argv[1:]
  main(args)
#
